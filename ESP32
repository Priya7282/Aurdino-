#include <WiFi.h>
#include <PubSubClient.h>

// ✅ Wi-Fi credentials (Wokwi simulator uses "Wokwi-GUEST")
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// ✅ MQTT broker details
const char* mqtt_server = "broker.hivemq.com";  // Free public broker
const int mqtt_port = 1883;
const char* mqtt_topic = "esp32/leds";

// ✅ Define LED pins
int leds[8] = {2, 4, 5, 18, 19, 21, 22, 23};

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected! IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* message, unsigned int length) {
  String command = "";
  for (int i = 0; i < length; i++) {
    command += (char)message[i];
  }
  command.trim();
  Serial.print("Command received: ");
  Serial.println(command);

  if (command == "ON_ALL") {
    for (int i = 0; i < 8; i++) digitalWrite(leds[i], HIGH);
  } 
  else if (command == "OFF_ALL") {
    for (int i = 0; i < 8; i++) digitalWrite(leds[i], LOW);
  } 
  else if (command == "CHASE") {
    for (int i = 0; i < 8; i++) {
      digitalWrite(leds[i], HIGH);
      delay(150);
      digitalWrite(leds[i], LOW);
    }
  } 
  else if (command == "BLINK") {
    for (int j = 0; j < 5; j++) { // blink 5 times
      for (int i = 0; i < 8; i++) digitalWrite(leds[i], HIGH);
      delay(300);
      for (int i = 0; i < 8; i++) digitalWrite(leds[i], LOW);
      delay(300);
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
      client.subscribe(mqtt_topic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" retrying in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  for (int i = 0; i < 8; i++) pinMode(leds[i], OUTPUT);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}